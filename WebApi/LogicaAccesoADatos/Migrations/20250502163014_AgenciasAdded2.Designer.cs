// <auto-generated />
using System;
using LogicaAccesoADatos.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LogicaAccesoADatos.Migrations
{
    [DbContext(typeof(EmpresaContext))]
    [Migration("20250502163014_AgenciasAdded2")]
    partial class AgenciasAdded2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LogicaNegocio.EntidadesDominio.Acciones.Accion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.HasKey("Id");

                    b.ToTable("Acciones");

                    b.HasDiscriminator().HasValue("Accion");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("LogicaNegocio.EntidadesDominio.Envíos.Agencia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Agencias");
                });

            modelBuilder.Entity("LogicaNegocio.EntidadesDominio.Usuarios.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Usuarios");

                    b.HasDiscriminator().HasValue("Usuario");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("LogicaNegocio.EntidadesDominio.Acciones.AccionAdministracion", b =>
                {
                    b.HasBaseType("LogicaNegocio.EntidadesDominio.Acciones.Accion");

                    b.Property<int?>("AfectadoId")
                        .HasColumnType("int");

                    b.Property<int>("RealizadorId")
                        .HasColumnType("int");

                    b.Property<int>("TipoAccion")
                        .HasColumnType("int");

                    b.HasIndex("AfectadoId");

                    b.HasIndex("RealizadorId");

                    b.HasDiscriminator().HasValue("AccionAdministracion");
                });

            modelBuilder.Entity("LogicaNegocio.EntidadesDominio.Usuarios.Cliente", b =>
                {
                    b.HasBaseType("LogicaNegocio.EntidadesDominio.Usuarios.Usuario");

                    b.HasDiscriminator().HasValue("Cliente");
                });

            modelBuilder.Entity("LogicaNegocio.EntidadesDominio.Usuarios.Empleado", b =>
                {
                    b.HasBaseType("LogicaNegocio.EntidadesDominio.Usuarios.Usuario");

                    b.HasDiscriminator().HasValue("Empleado");
                });

            modelBuilder.Entity("LogicaNegocio.EntidadesDominio.Usuarios.Administrador", b =>
                {
                    b.HasBaseType("LogicaNegocio.EntidadesDominio.Usuarios.Empleado");

                    b.HasDiscriminator().HasValue("Administrador");
                });

            modelBuilder.Entity("LogicaNegocio.EntidadesDominio.Acciones.Accion", b =>
                {
                    b.OwnsOne("LogicaNegocio.ValueObjects.FechaAccion", "Fecha", b1 =>
                        {
                            b1.Property<int>("AccionId")
                                .HasColumnType("int");

                            b1.Property<DateTime>("Fecha")
                                .HasColumnType("datetime2");

                            b1.HasKey("AccionId");

                            b1.ToTable("Acciones");

                            b1.WithOwner()
                                .HasForeignKey("AccionId");
                        });

                    b.Navigation("Fecha")
                        .IsRequired();
                });

            modelBuilder.Entity("LogicaNegocio.EntidadesDominio.Envíos.Agencia", b =>
                {
                    b.OwnsOne("LogicaNegocio.ValueObjects.DireccionPostal", "Direccion", b1 =>
                        {
                            b1.Property<int>("AgenciaId")
                                .HasColumnType("int");

                            b1.Property<string>("Calle")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("CodigoPostal")
                                .HasColumnType("int");

                            b1.Property<int>("Numero")
                                .HasColumnType("int");

                            b1.HasKey("AgenciaId");

                            b1.ToTable("Agencias");

                            b1.WithOwner()
                                .HasForeignKey("AgenciaId");

                            b1.OwnsOne("LogicaNegocio.ValueObjects.Ciudad", "Ciudad", b2 =>
                                {
                                    b2.Property<int>("DireccionPostalAgenciaId")
                                        .HasColumnType("int");

                                    b2.Property<string>("Nombre")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("DireccionPostalAgenciaId");

                                    b2.ToTable("Agencias");

                                    b2.WithOwner()
                                        .HasForeignKey("DireccionPostalAgenciaId");
                                });

                            b1.Navigation("Ciudad")
                                .IsRequired();
                        });

                    b.OwnsOne("LogicaNegocio.ValueObjects.Ubicacion", "Ubicacion", b1 =>
                        {
                            b1.Property<int>("AgenciaId")
                                .HasColumnType("int");

                            b1.Property<double>("Latitud")
                                .HasColumnType("float");

                            b1.Property<double>("Longitud")
                                .HasColumnType("float");

                            b1.HasKey("AgenciaId");

                            b1.ToTable("Agencias");

                            b1.WithOwner()
                                .HasForeignKey("AgenciaId");
                        });

                    b.Navigation("Direccion")
                        .IsRequired();

                    b.Navigation("Ubicacion")
                        .IsRequired();
                });

            modelBuilder.Entity("LogicaNegocio.EntidadesDominio.Usuarios.Usuario", b =>
                {
                    b.OwnsOne("LogicaNegocio.ValueObjects.Usuario.UsuarioNombre", "Nombre", b1 =>
                        {
                            b1.Property<int>("UsuarioId")
                                .HasColumnType("int");

                            b1.Property<string>("Apellido")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Nombre")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("UsuarioId");

                            b1.ToTable("Usuarios");

                            b1.WithOwner()
                                .HasForeignKey("UsuarioId");
                        });

                    b.OwnsOne("LogicaNegocio.ValueObjects.Usuario.UsuarioPassword", "Password", b1 =>
                        {
                            b1.Property<int>("UsuarioId")
                                .HasColumnType("int");

                            b1.Property<string>("Password")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("UsuarioId");

                            b1.ToTable("Usuarios");

                            b1.WithOwner()
                                .HasForeignKey("UsuarioId");
                        });

                    b.Navigation("Nombre")
                        .IsRequired();

                    b.Navigation("Password")
                        .IsRequired();
                });

            modelBuilder.Entity("LogicaNegocio.EntidadesDominio.Acciones.AccionAdministracion", b =>
                {
                    b.HasOne("LogicaNegocio.EntidadesDominio.Usuarios.Empleado", "Afectado")
                        .WithMany()
                        .HasForeignKey("AfectadoId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("LogicaNegocio.EntidadesDominio.Usuarios.Administrador", "Realizador")
                        .WithMany()
                        .HasForeignKey("RealizadorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Afectado");

                    b.Navigation("Realizador");
                });
#pragma warning restore 612, 618
        }
    }
}
